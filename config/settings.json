// 将设置放入此文件中以覆盖默认设置
{
    // editor
    "editor.fontSize": 13,
    "editor.tabSize": 2,
    "editor.smoothScrolling": true,
    // vim
    "vim.leader": ",",
    "vim.incsearch": true,
    "vim.useCtrlKeys": true,
    "vim.ignorecase": true,
    "vim.hlsearch": true,
    "vim.useSystemClipboard": true,
    "vim.searchHighlightColor":"rgba(150, 150, 255, 1)",
    "vim.easymotion": true,
    "vim.handleKeys":{
        "<C-a>": false,
        "<C-h>": false
    },
    "vim.insertModeKeyBindings": [],
    "vim.visualModeKeyBindings": [],
    "vim.normalModeKeyBindings": [
        {
            "before": ["z", "r"],
            "after": [],
            "commands": [
                {
                    "command": "editor.fold",
                    "args": []
                }
            ]
        },
        {
            "before": ["leader", "D"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.goToImplementation",
                    "args": []
                }
            ]
        },
        {
            "before": ["leader", "d"],
            "after": [],
            "commands": [
                {
                    "command": "editor.action.goToDeclaration",
                    "args": []
                }
            ]
        },
        {
            // easymotion search 2 char re-map to 'f'
            "before": ["f"],
            "after": ["leader", "leader", "2", "s"]
        },
        {
            // easymotion search any char re-map to 'F'
            "before": ["F"],
            "after": ["leader", "leader", "/"]
        },
        {
            "before": ["z", "t"],
            "after": [],
            "commands": [
                {
                    "command": "editor.unfold",
                    "args": []
                }
            ]
        },
        {
            "before": ["m", "m"],
            "after": [],
            "commands": [
                {
                    "command": "bookmarks.toggle",
                    "args": []
                }
            ]
        },
        {
            "before": ["m", "a"],
            "after": [],
            "commands": [
                {
                    "command": "bookmarks.listFromAllFiles",
                    "args": []
                }
            ]
        },
        {
            "before": ["m", "l"],
            "after": [],
            "commands": [
                {
                    "command": "bookmarks.list",
                    "args": []
                }
            ]
        },
        {
            "before": ["m", "f"],
            "after": [],
            "commands": [
                {
                    "command": "bookmarks.jumpToNext",
                    "args": []
                }
            ]
        },
        {
            "before": ["m", "b"],
            "after": [],
            "commands": [
                {
                    "command": "bookmarks.jumpToPrevious",
                    "args": []
                }
            ]
        },
        {
            "before": ["leader", "w"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.files.save",
                    "args": []
                }
            ]
        },
        {
            "before": ["leader", "q"],
            "after": [],
            "commands": [
                {
                    "command": "workbench.action.closeActiveEditor",
                    "args": []
                }
            ]
        },
        {
            "before": ["leader", "g", "d"],
            "after": [],
            "commands": [
                {
                    "command": "git.openChange",
                    "args": []
                }
            ]
        }
    ],
    // ignore folders in search mode
    "search.exclude": {
        "**/node_modules": true,
        "**/bower_components": true,
        "**/dist": true,
        "**/deploy": true
    },
    "files.associations": {
        "*.wpy": "html",
        "*.wxml": "html",
        "*.wxss": "css",
        "*.mpx": "vue"
    },
    "eslint.validate": [
        "javascript",
        "javascriptreact",
        {
            "language": "vue",
            "autoFix": true
        }
    ],
    "eslint.autoFixOnSave": true,
    "javascript.validate.enable": false,

    // Defines space handling after a comma delimiter
    "javascript.format.insertSpaceAfterCommaDelimiter": true,

    // Defines space handling after a semicolon in a for statement
    "javascript.format.insertSpaceAfterSemicolonInForStatements": false,

    // Defines space handling after a binary operator
    "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": false,

    // Defines space handling after keywords in control flow statement
    "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

    // Defines space handling after function keyword for anonymous functions
    "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

    // Defines space handling after opening and before closing non-empty parenthesis
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": true,

    // Defines space handling after opening and before closing non-empty brackets
    "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

    // Defines whether an open brace is put onto a new line for functions or not
    "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

    // Defines whether an open brace is put onto a new line for control blocks or not
    "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

    "workbench.colorTheme": "Monokai Dimmed",
    "workbench.editor.enablePreviewFromQuickOpen": false
}